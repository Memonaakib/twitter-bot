name: Geopolitical News Bot

on:
  schedule:
    - cron: "0 */1 * * *"  # Every hour
  workflow_dispatch:

jobs:
  tweet:
    runs-on: ubuntu-latest
    timeout-minutes: 28
    env:
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NLTK_DATA: /home/runner/.nltk_data  # Changed to absolute path

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxml2-dev \
            libxslt-dev \
            libffi-dev \
            python3-dev

      - name: Create NLTK directory
        run: mkdir -p /home/runner/.nltk_data

      - name: Cache NLTK data
        uses: actions/cache@v3
        with:
          path: /home/runner/.nltk_data
          key: ${{ runner.os }}-nltk-${{ hashFiles('nltk_requirements.txt') }}-v2
          restore-keys: |
            ${{ runner.os }}-nltk-

      - name: Download NLTK datasets
        run: |
          python -c "import nltk; nltk.download('punkt', download_dir='/home/runner/.nltk_data')"
          python -c "import nltk; nltk.download('stopwords', download_dir='/home/runner/.nltk_data')"
          echo "NLTK data downloaded:"
          ls -la /home/runner/.nltk_data

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify NLTK setup
        run: |
          echo "NLTK search paths:"
          python -c "import nltk; print(nltk.data.path)"
          echo "Contents of NLTK data directory:"
          ls -la /home/runner/.nltk_data

      - name: Run Twitter Bot with Timeout
        env:
          API_KEY: ${{ secrets.API_KEY }}
          API_SECRET: ${{ secrets.API_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}
        run: |
          timeout 25m python tweet_bot.py || echo "Bot completed with exit code $?"

      - name: Post-cache cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files"
